* Crea tu primera CSS Grid

    Convierte cualquier elemento HTML en una grid al establecer 
    la propiedad display a grid. Esto te da la habilidad de usar 
    todas las demás propiedades asociadas con CSS Grid.

    Nota: en CSS Grid, el elemento padre se refiere como el 
    contenedor y sus hijos se llaman elementos.


* Agrega columnas con grid-template-columns

    Crear un simple elemento cuadrícula (grid) no te llevará muy 
    lejos. Necesitas también definir su estructura. Para agregar 
    columnas a la cuadrícula, usa la propiedad 
    grid-template-columns en el contenedor de la cuadrícula 
    como se demuestra a continuación:

        .container {
            display: grid;
            grid-template-columns: 50px 50px;
        }
    
    Esto le dará a tu cuadrícula dos columnas que tienen 
    50px de ancho cada una. 
    El número de parámetros que se le da a la propiedad 
    grid-template-columns indica el número de columnas en la 
    cuadrícula y el valor de cada parámetro indica el ancho 
    de cada columna.


* Agrega filas con grid-template-rows

    La cuadrícula (grid) que creaste en el último desafío 
    establecerá el número de filas automáticamente. 
    Para ajustar las filas manualmente, usa la propiedad 
    grid-template-rows de la misma manera en la que usaste 
    grid-template-columns en el desafío anterior.


* Usa unidades CSS Grid para cambiar el tamaño de las 
    columnas y filas

    Puedes usar unidades absolutas y relativas como px y em 
    en CSS Grid para definir el tamaño de filas y columnas. 
    Puedes usar estas también:

    fr: fija la columna o fila a una fracción del espacio 
        disponible,

    auto: fija la columna o fila al ancho o alto de su 
        contenido automáticamente,

    %: ajusta la columna o fila al porcentaje de ancho de 
        su contenedor.

    A continuación el código que genera el resultado de la 
    vista previa:

        grid-template-columns: auto 50px 10% 2fr 1fr;

    Esta línea de código genera cinco columnas. 
    La primera columna es tan ancha como su contenido, 
    la segunda tiene 50px de ancho, 
    la tercera es el 10% de su contenedor y para las 
    últimas dos columnas; el espacio restante es 
    dividido en tres secciones: 
    dos son asignadas a la cuarta columna y una a la 
    quinta columna.


* Crea un espacio entre columnas usando grid-column-gap

    Hasta ahora en las grids que has creado, las columnas 
    han estado todas juntas. Algunas veces querrás un 
    espacio entre las columnas. 
    Para agregar un espacio entre las columnas, usa la 
    propiedad grid-column-gap de la siguiente manera:

        grid-column-gap: 10px;
    
    Esto crea espacios vacíos de 10px entre todas las 
    columnas.


* Crea un espacio entre filas usando grid-row-gap

    Puedes agregar un espacio entre las filas usando 
    grid-row-gap de la misma manera en la que agregaste 
    un espacio entre las columnas en el desafío anterior.


* Agrega espacios más rápido con grid-gap
    
    grid-gap es una propiedad abreviada para grid-row-gap y 
    grid-column-gap de los dos desafíos anteriores que es 
    más conveniente usar. Si grid-gap tiene un valor, 
    creará un espacio entre todas las filas y columnas. 
    Sin embargo, si hay dos valores, usará el primero de estos 
    para poner los espacios entre las filas y el segundo para 
    los espacios entre las columnas.


* Usa grid-column para controlar espaciado

    Hasta este punto, todas las propiedades que hemos discutido 
    son para los contenedores de cuadrícula (grid). 
    La propiedad grid-column es la primera que usaremos para 
    los propios elementos de la cuadrícula.

    Las líneas horizontales y verticales hipotéticas que crean 
    la cuadrícula son referidas como líneas. 
    Estas líneas son enumeradas empezando con el 1 desde la 
    esquina superior izquierda de la cuadrícula y se desplaza 
    hacia la derecha para las columnas y hacia abajo para las 
    filas, contando hacia arriba.

    Así es como se ven las líneas para una grid de 3x3:
        https://www.freecodecamp.org/espanol/learn/responsive-web-design/css-grid/use-grid-column-to-control-spacing

    Para controlar la cantidad de columnas que un elemento tendrá, 
    puedes usar la propiedad grid-column en conjunto con el número 
    de las líneas en las que quieres que empiece y termine.

    Aquí un ejemplo:

    grid-column: 1 / 3;

    Esto hará que el elemento empiece en la primera línea vertical 
    de la grid a la izquierda y se extienda a la 3ra línea de la grid, 
    ocupando dos columnas.


* Usa grid-row para controlar espaciado

    Por supuesto, puedes hacer que los elementos ocupen múltiples filas
    así como se puede hacer con las columnas. 
    Puedes definir las líneas horizontales donde quieres que un elemento 
    empiece y termine usando la propiedad grid-row sobre un elemento 
    de cuadrícula (grid).


* Alinea un elemento horizontalmente usando justify-self
    En CSS Grid, el contenido de cada elemento está ubicado en una caja, 
    la cual se refiere como celda. 
    Puedes alinear la posición del contenido dentro de la celda 
    horizontalmente usando la propiedad justify-self en un elemento grid. 
    Por defecto, esta propiedad tiene valor de stretch, 
    lo que hace que el contenido cubra todo el ancho de la celda. 
    Esta propiedad de CSS Grid acepta otros valores también:

    start: alinea el contenido hacia la izquierda de la celda,

    center: alinea el contenido en el centro de la celda,

    end: alinea el contenido hacia la derecha de la celda.


* Alinea un elemento verticalmente usando align-self

    Así como puedes alinear un elemento horizontalmente, 
    hay una manera de alinearlo verticalmente también. 
    Para hacer esto, usa la propiedad align-self sobre un elemento. 
    Esta propiedad acepta los mismos valores que justify-self del 
    desafío anterior.


* Alinea todos los elementos horizontalmente usando justify-items

    Algunas veces querrás que todos los elementos en tu CSS Grid 
    compartan el mismo alineamiento. 
    Puedes usar las propiedades aprendidas anteriormente y 
    alinearlos individualmente, o puedes alinear todos a la vez 
    horizontalmente usando justify-items en el contenedor de tu grid. 
    Esta propiedad acepta los mismos valores aprendidos en los dos 
    desafíos previos, siendo la única diferencia que moverá todos 
    los elementos de la grid hacia el alineamiento deseado.


* Alinea todos los elementos verticalmente usando align-items

    Usar la propiedad align-items en el contenedor de una grid 
    establecerá el alineamiento vertical de todos los elementos 
    de la grid.


* Divide la cuadrícula en una plantilla de área

    Puedes agrupar las celdas de tu grid en una área y darle a 
    esa área un nombre personalizado. Haz esto usando 
    grid-template-areas en el contenedor de la siguiente manera:

        grid-template-areas:
        "header header header"
        "advert content content"
        "footer footer footer";

    El código anterior fusiona las tres celdas superiores en una 
    área llamada header, las tres celdas inferiores en una área 
    footer y hace dos áreas en la fila del medio; advert y content. 
    Nota: cada palabra en el código representa una celda y cada 
    par de comillas representa una fila. Además de los nombres 
    personalizados, puedes usar un punto (.) para designar una 
    celda vacía en la grid.


* Ubica elementos en áreas de cuadrícula usando la propiedad grid-area

    Después de crear una plantilla de área para tu contenedor de 
    cuadrícula (grid), cómo se muestra en el desafío anterior, 
    puedes ubicar un elemento en tu área personalizada referenciando 
    el nombre que le diste. Para hacer esto, usa la propiedad grid-area 
    sobre un elemento así:

        .item1 {
            grid-area: header;
        }

    Esto le dice a la cuadrícula que quieres que la clase item1 se 
    ubique en el área llamada header. En este caso, el elemento usará 
    la totalidad de la fila superior porque esa área se llama header.


* Usa grid-area sin crear plantillas de área

    La propiedad grid-area que aprendiste en el último desafío puede 
    ser usada de otra manera. Si tu cuadrícula (grid) no tiene 
    plantillas de área de referencia, puedes crear un área para un 
    elemento sobre la marcha para ubicar los elementos de la 
    siguiente manera:

    item1 { grid-area: 1/1/2/4; }
    
    Esto usa los números de líneas aprendidos anteriormente para 
    definir cuál será el área de ese elemento. 
    Los números en el ejemplo anterior representan estos valores:

    grid-area: horizontal line to start at / vertical line to start at 
                / horizontal line to end at / vertical line to end at;
    
    Entonces, el elemento en el ejemplo ocupará las filas entre las 
    líneas 1 y 2, y las columnas entre las líneas 1 y 4.


* Reduce repeticiones usando la función repeat

    Cuando usaste grid-template-columns y grid-template-rows para definir 
    la estructura de una grid, ingresaste un valor para cada fila o columna 
    que creaste.

    Digamos que quieres una grid con 100 filas del mismo tamaño. 
    No es muy práctico insertar 100 valores manualmente. 
    Afortunadamente, hay una mejor manera - usando la función repeat 
    para especificar el número de veces que quieres que tu columna o fila 
    se repita, seguido de una coma y el valor que quieres repetir.

    A continuación un ejemplo que crearía una grid de 100 filas, 
    cada fila con 50px de alto.

        grid-template-rows: repeat(100, 50px);
    
    También puedes repetir múltiples valores con la función repeat e 
    insertar la función entre otros valores al definir una estructura de grid. 
    Así se ve:

        grid-template-columns: repeat(2, 1fr 50px) 20px;

    Esto traduce a:

        grid-template-columns: 1fr 50px 1fr 50px 20px;

    Nota: el 1fr 50px es repetido dos veces, seguido de 20px.













